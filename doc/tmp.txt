#include <SDL2/SDL.h>
#include <SDL2/SDL_image.h>
#include <SDL2/SDL_ttf.h>
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>

int main(int argc, char *argv[])
{
    SDL_Window *window = NULL;
    SDL_Renderer *renderer = NULL;
    SDL_Surface *surface = NULL;
    SDL_Texture *texture = NULL;
    SDL_Event event;

    if (SDL_Init(SDL_INIT_VIDEO) < 0) {
        SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, "Couldn't initialize SDL: %s", SDL_GetError());
        return 3;
    }

    // load support for the JPG and PNG image formats
    int flags = IMG_INIT_JPG|IMG_INIT_PNG;
    if( (IMG_Init(flags)&flags) != flags ) {
        std::cout << "IMG_Init: Failed to init required jpg and png support!\n";
        std::cout << "IMG_Init: " << IMG_GetError() << std::endl;
        // handle error
    }

    if(TTF_Init()==-1) {
        std::cout << "TTF_Init: " << TTF_GetError() << std::endl;
        return 3;
    }

    TTF_Font *font;
    font = TTF_OpenFont("fonts/GenJyuuGothic-P-Bold.ttf", 300);
    if(!font) {
        std::cout << "TTF_OpenFont: " << TTF_GetError() << std::endl;
        return 3;
        // handle error
    }
    TTF_SetFontStyle(font, TTF_STYLE_BOLD);
    SDL_Color color={255,0,235};

    window = SDL_CreateWindow("Hello World", 50, 50, 640, 120, SDL_WINDOW_SHOWN|SDL_WINDOW_RESIZABLE);
    if (!window) {
        SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, "Couldn't create window: %s", SDL_GetError());
        return 3;
    }

    renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
    if (!renderer) {
        SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, "Couldn't create renderer: %s", SDL_GetError());
        return 3;
    }

    Uint32 startTime = 0;
    std::stringstream timeText;
    int start = 60; //從幾秒開始倒數 
    double rest = start; //剩下的秒數 
    int minite = rest / 60;  
    int second = rest - minite*60;
	
	bool initial = false;
	bool quit = false;
    while (!quit) {
        while( SDL_PollEvent(&event) ){
            if (event.type == SDL_KEYDOWN && event.key.keysym.sym == SDLK_SPACE) {
            	//按空白離開 
                quit = true;
            }
            else if( event.type == SDL_KEYDOWN && event.key.keysym.sym == SDLK_UP)
            //假如按了上鍵-->開始計時or重新開始 
            {
            	initial = true;
            	startTime = SDL_GetTicks();
            	rest = start - (SDL_GetTicks() - startTime)/100;
			}
        }
        
		timeText.str( "" );
        if (initial && rest > 1) rest = start - (SDL_GetTicks() - startTime)/100; 
		//rest>1是為了怕他最後不會停在00:00 
 		minite = rest / 60; //剩餘的分鐘 
 		second = rest - minite*60; // 剩餘的秒鐘 
		timeText << std::fixed << std::setw(2) << std::setfill('0') << minite << ":" ;
		if(second > 1) timeText << std::fixed << std::setw(2) << std::setfill('0') << second << " left";
		else timeText << "00 left";//最後停留在00:00 
        
        
        surface = TTF_RenderText_Solid(font, timeText.str().c_str(), color);
        if (!surface) {
            SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, "Couldn't create surface from image: %s", SDL_GetError());
            return 3;
        }
        texture = SDL_CreateTextureFromSurface(renderer, surface);
        if (!texture) {
            SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, "Couldn't create texture from surface: %s", SDL_GetError());
            return 3;
        }
        SDL_FreeSurface(surface);
        SDL_SetRenderDrawColor(renderer, 0x00, 0xff, 0xff, 0x00);
        SDL_RenderClear(renderer);
        SDL_RenderCopy(renderer, texture, NULL, NULL);
        SDL_RenderPresent(renderer);
        SDL_DestroyTexture(texture); //每次都要free 
    }

    close:
    TTF_CloseFont(font);
    font = NULL;

    SDL_DestroyTexture(texture);
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);

    TTF_Quit();
    IMG_Quit();
    SDL_Quit();

    return 0;
}
